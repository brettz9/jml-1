// Generated by CoffeeScript 1.3.3
(function() {
  var fs, jml;

  fs = require('fs');

  jml = require('./jml.coffee');

  module.exports = {
    oneTag: {
      simple: function(test) {
        var rendered, template;
        template = [['tag']];
        rendered = '<tag></tag>';
        test.strictEqual(jml(template), rendered, 'Tag');
        template = [['meta']];
        rendered = '<meta />';
        test.strictEqual(jml(template), rendered, 'No-closed tag');
        template = [['tag#id']];
        rendered = '<tag id="id"></tag>';
        test.strictEqual(jml(template), rendered, 'Tag with id');
        template = [['tag.class']];
        rendered = '<tag class="class"></tag>';
        test.strictEqual(jml(template), rendered, 'Tag with class');
        template = [
          [
            'tag', {
              _attr: 'value'
            }
          ]
        ];
        rendered = '<tag attr="value"></tag>';
        test.strictEqual(jml(template), rendered, 'Tag with attribute');
        template = [
          [
            'tag', {
              style: 'value'
            }
          ]
        ];
        rendered = '<tag style="style: value;"></tag>';
        test.strictEqual(jml(template), rendered, 'Tag with style');
        return test.done();
      },
      full: function(test) {
        var rendered, template;
        template = [
          [
            'tag#id.class1.class2', {
              _attr1: 'value1',
              _attr2: 'value2',
              style1: 'value1',
              style2: 'value2'
            }
          ]
        ];
        rendered = '<tag id="id" class="class1 class2" attr1="value1" attr2="value2" style="style1: value1; style2: value2;"></tag>';
        test.strictEqual(jml(template), rendered, 'Full options');
        template = [
          [
            'tag', {
              _id: 'id',
              _class: 'class1 class2',
              _attr1: 'value1',
              _attr2: 'value2',
              style1: 'value1',
              style2: 'value2'
            }
          ]
        ];
        test.strictEqual(jml(template), rendered, 'Full options alternative');
        return test.done();
      }
    },
    nestedTags: function(test) {
      var rendered, template;
      template = [['tag1', ['tag2']]];
      rendered = '<tag1><tag2></tag2></tag1>';
      test.strictEqual(jml(template), rendered, 'Nested tags');
      return test.done();
    },
    tagWithOptions: {
      tag: function(test) {
        var rendered, template;
        template = [
          [
            function() {
              return this.tag;
            }
          ]
        ];
        rendered = '<tag></tag>';
        test.strictEqual(jml(template, {
          tag: 'tag'
        }), rendered, 'Optional tag name');
        return test.done();
      },
      attributes: function(test) {
        var rendered, template;
        template = [
          [
            'tag', {
              _id: function() {
                return this.id;
              }
            }
          ]
        ];
        rendered = '<tag id="id"></tag>';
        test.strictEqual(jml(template, {
          id: 'id'
        }), rendered, 'Optional attribute');
        template = [
          [
            'tag', {
              _: function() {
                return this.attrs;
              }
            }
          ]
        ];
        rendered = '<tag id="id"></tag>';
        test.strictEqual(jml(template, {
          attrs: {
            _id: 'id'
          }
        }), rendered, 'Optional attribute alternative');
        return test.done();
      },
      contentSingle: function(test) {
        var rendered, template;
        template = [
          [
            'tag', function() {
              return this.content;
            }
          ]
        ];
        rendered = '<tag>content</tag>';
        test.strictEqual(jml(template, {
          content: 'content'
        }), rendered, 'Tag content');
        return test.done();
      },
      contentMultiple: function(test) {
        var rendered, template;
        template = [
          [
            'tag', function() {
              return this.content;
            }
          ]
        ];
        rendered = '<tag>content<tag2></tag2></tag>';
        test.strictEqual(jml(template, {
          content: ['content', ['tag2']]
        }), rendered, 'Tag content');
        return test.done();
      }
    },
    namedTemplate: {
      define: function(test) {
        var defaultState, template, view;
        defaultState = {
          param1: 'value1',
          param2: 'value4'
        };
        view = [
          [
            'tag', function() {
              return this.param1 + this.param2 + this.param3;
            }
          ]
        ];
        template = jml.view('Test', view, defaultState);
        test.strictEqual(template.state, defaultState, 'State the same');
        test.strictEqual(template.view, view, 'State the view');
        test.strictEqual(template, jml.views.Test, 'Template in jml storage');
        return test.done();
      },
      render: function(test) {
        var rendered, template;
        template = jml.views.Test;
        rendered = '<tag>value1value2value3</tag>';
        test.strictEqual(template({
          param2: 'value2',
          param3: 'value3'
        }), rendered, 'Template render');
        return test.done();
      },
      include: function(test) {
        var rendered, template;
        template = jml.view('Test', [
          [
            'div', [
              'Test2', {
                prop: 'value1'
              }, 'value2'
            ]
          ]
        ]);
        jml.view('Test2', [
          [
            'span', function() {
              return this.prop;
            }, function() {
              return this.content;
            }
          ]
        ]);
        rendered = '<div><span>value1value2</span></div>';
        test.strictEqual(template(), rendered, 'Template render with included template');
        rendered = '<div>' + rendered + '</div>';
        test.strictEqual(jml.render([['div', ['Test']]]), rendered, 'Template render with included template');
        return test.done();
      }
    },
    optimize: function(test) {
      var template, view;
      view = [
        [
          'tag1', {
            _attr1: 'value1'
          }, [
            'tag2', {
              _attr2: 'value2'
            }, function() {
              return this.title;
            }
          ]
        ]
      ];
      template = jml.view('Test', view);
      template.optimize();
      test.strictEqual(template.view[0], '<tag1 attr1="value1"><tag2 attr2="value2">', 'Left part optimized');
      test.strictEqual(template.view[2], '</tag2></tag1>', 'Right part optimized');
      return test.done();
    },
    serialize: function(test) {
      var data, expect;
      expect = 'jml.view("Test", [\'<tag1 attr1="value1"><tag2 attr2="value2">\',function(){return this.title},"</tag2></tag1>"]);';
      data = jml.views.Test.serialize();
      test.strictEqual(data, expect, 'Serialize template');
      return test.done();
    },
    save: {
      one: function(test) {
        var data, expect;
        expect = 'jml.view("Test", [\'<tag1 attr1="value1"><tag2 attr2="value2">\',function(){return this.title},"</tag2></tag1>"]);';
        jml.views.Test.save(__dirname + '/template.js');
        data = fs.readFileSync(__dirname + '/template.js', 'utf-8');
        test.strictEqual(data, expect, 'Check saved template');
        fs.unlinkSync(__dirname + '/template.js');
        return test.done();
      },
      all: function(test) {
        var data, expect;
        expect = 'jml.view("Test", [\'<tag1 attr1="value1"><tag2 attr2="value2">\',function(){return this.title},"</tag2></tag1>"]);\n';
        jml.views.Test2 = jml.views.Test;
        jml.saveAll(__dirname + '/template.js');
        data = fs.readFileSync(__dirname + '/template.js', 'utf-8');
        test.strictEqual(data, expect + expect, 'Check saved templates');
        fs.unlinkSync(__dirname + '/template.js');
        return test.done();
      }
    },
    load: {
      jml: function(test) {
        var template;
        template = jml.loadView(__dirname + '/sample.jml');
        test.equal(template[0][0], 'tag:jml', 'Load JML template');
        return test.done();
      },
      cml: function(test) {
        var template;
        template = jml.loadView(__dirname + '/sample.cml');
        test.equal(template[0][0], 'tag:cml', 'Load CML template');
        return test.done();
      }
    },
    get: function(test) {
      var template, _ref;
      template = jml.view('Test');
      test.ok(template != null ? (_ref = template.view) != null ? _ref.length : void 0 : void 0, 'Renderer have view');
      return test.done();
    }
  };

}).call(this);
