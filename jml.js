// Generated by CoffeeScript 1.3.3

/*
JML - Javascript template engine
@copyright Yamanov Andrey <tenphi@gmail.com>
@version 0.5.3
*/


(function() {
  var clone, cloneWithState, extend, handleName, inArray, init, isArray, isBoolean, isClient, isEmptyObject, isFunction, isObject, isServer, isString, type,
    __slice = [].slice;

  type = (function() {
    var classToType, name, _i, _len, _ref;
    classToType = {};
    _ref = 'Boolean Number String Function Array Date Regexp Undefined Null'.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType['[object ' + name + ']'] = name.toLowerCase();
    }
    return function(obj) {
      return classToType[Object.prototype.toString.call(obj)] || 'object';
    };
  })();

  isArray = function(arr) {
    return type(arr) === 'array';
  };

  isObject = function(obj) {
    return type(obj) === 'object';
  };

  isFunction = function(func) {
    return type(func) === 'function';
  };

  isString = function(str) {
    return type(str) === 'string';
  };

  isBoolean = function(bool) {
    return type(bool) === 'boolean';
  };

  extend = function(obj) {
    var extObj, i, name, value, _i, _ref;
    for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
      extObj = arguments[i];
      for (name in extObj) {
        value = extObj[name];
        obj[name] = value;
      }
    }
    return obj;
  };

  inArray = function(val, arr) {
    var i, val2, _i, _len;
    if (arr.indexOf) {
      return arr.indexOf(val);
    }
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      val2 = arr[i];
      if (val === val2) {
        return i;
      }
    }
    return -1;
  };

  clone = function(obj) {
    var name, temp, value;
    temp = {};
    for (name in obj) {
      value = obj[name];
      if (isObject(value)) {
        temp[name] = clone(value);
      } else {
        temp[name] = value;
      }
    }
    return temp;
  };

  cloneWithState = function(obj, state) {
    var flag, name, temp, value;
    temp = {};
    flag = false;
    for (name in obj) {
      value = obj[name];
      if (isFunction(value)) {
        if (name === '_') {
          flag = true;
          delete obj['_'];
          extend(temp, value.apply(state));
          continue;
        }
        flag = true;
        value = value.apply(state);
      }
      if (name === '_') {
        extend(temp, value);
        flag = true;
        delete obj['_'];
        continue;
      }
      temp[name] = value;
    }
    if (flag) {
      return temp;
    } else {
      return obj;
    }
  };

  isEmptyObject = function(obj) {
    var flag, i;
    flag = true;
    for (i in obj) {
      flag = false;
      break;
    }
    return flag;
  };

  handleName = function(name) {
    return name.replace(/[A-Z]/g, function(s) {
      return '-' + s.toLowerCase();
    });
  };

  isServer = typeof global !== 'undefined';

  isClient = !isServer;

  init = function() {
    var counter, jml, optimize, optimizeAll, optimizeArray, optimizeNormalize, optimizeTag, originalState, render, renderArray, renderAttrs, renderStyles, renderTag, saveAll, watchAll;
    jml = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return jml.render.apply(jml, args);
    };
    /* Defined Templates
    */

    jml.views = {};
    /* Template name pattern
    */

    jml.viewNamePattern = /^[A-Z][A-Za-z0-9_\.]*$/;
    /* Tags that not containers
    */

    jml.noClose = ['base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source'];
    /* ID Prefix
    */

    jml.idPrefix = typeof window === void 0 ? 's' : 'c';
    /* injector
    */

    jml.injector = function(elm, state, id) {
      return '';
    };
    /* id generator
    */

    counter = 0;
    jml.generateId = function() {
      return jml.idPrefix + (++counter);
    };
    originalState = {};
    if (isServer) {
      jml.loadView = function(file) {
        var coffee, data, fs;
        fs = require('fs');
        try {
          data = fs.readFileSync(file, 'utf-8');
          if (file.slice(-4) === '.cml' || file.slice(-7) === '.coffee') {
            coffee = require('coffee-script');
            return coffee["eval"](data);
          } else {
            return eval(data);
          }
        } catch (e) {
          console.log('Can\'t load template file `' + file + '`');
          console.log(e);
          return [];
        }
      };
    }
    if (isClient) {
      jml.loaded = {};
      jml.load = function(url, callback) {
        var req;
        if (jml.loaded[url]) {
          setTimeout((function() {
            return typeof callback === "function" ? callback(null, jml.loaded[url]) : void 0;
          }), 1);
          return jml;
        }
        req = new XMLHttpRequest();
        req.open('GET', url, true);
        req.onreadystatechange = function() {
          var template;
          if (req.readyState !== 4) {
            return;
          }
          try {
            template = eval(req.responseText);
            jml.loaded[url] = template;
            return typeof callback === "function" ? callback(template) : void 0;
          } catch (e) {
            return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(e) : void 0 : void 0;
          }
        };
        req.send();
        return jml;
      };
    }
    jml.view = function(name, view, state) {
      var file, fs, renderer, watcher, _ref;
      if (!view && isString(name)) {
        if (jml.views[name]) {
          return jml.views[name];
        }
        return;
      }
      if (isServer) {
        if (isString(name) && isString(view)) {
          file = view;
          view = jml.loadView(file);
        } else if (isString(name) && isObject(view)) {
          file = name;
          view = jml.loadView(file);
          name = '';
        }
      }
      if (isArray(name)) {
        _ref = [name, view], view = _ref[0], state = _ref[1];
        name = '';
      }
      if (name && !name.match(this.viewNamePattern)) {
        throw 'jml: Wrong template name: ' + name;
      }
      if (!isArray(view)) {
        throw 'jml: Wrong view (not array). type - ' + typeof view;
      }
      view.state = state;
      renderer = function(state) {
        state = extend(clone(renderer.state || {}), state);
        return jml.renderArray(renderer.view, state);
      };
      renderer.optimized = false;
      renderer.optimize = function() {
        renderer.view = jml.optimize(renderer.view);
        renderer.optimized = true;
        return renderer;
      };
      renderer.view = view;
      renderer.state = state;
      if (name) {
        renderer.viewName = name;
        jml.views[name] = renderer;
      }
      renderer.serialize = function() {
        var sourin;
        sourin = require('sourin');
        return 'jml.view(' + (renderer.viewName ? '"' + renderer.viewName + '", ' : '') + sourin(renderer.view, true) + (renderer.state ? ', ' + sourin(renderer.state, true) : '') + ');';
      };
      renderer.saved = false;
      renderer.save = function(file) {
        var fs;
        fs = require('fs');
        fs.writeFileSync(file, this.serialize(), 'utf-8');
        renderer.saved = file;
        return this;
      };
      watcher = function() {
        renderer.view = jml.loadView(file);
        if (renderer.optimized) {
          renderer.optimize();
        }
        if (renderer.saved) {
          return renderer.save(renderer.saved);
        }
      };
      if (file) {
        fs = require('fs');
        renderer.watch = function(interval) {
          fs.watchFile(file, {
            persistent: true,
            interval: interval || 500
          }, watcher);
          renderer.watching = true;
          return renderer;
        };
        renderer.unwatch = function() {
          fs.unwatchFile(file, watcher);
          renderer.watching = false;
          return renderer;
        };
      }
      return renderer;
    };
    optimizeAll = jml.optimizeAll = function(names) {
      var name, _i, _len;
      if (!names) {
        names = (function() {
          var _results;
          _results = [];
          for (name in jml.views) {
            _results.push(name);
          }
          return _results;
        })();
      }
      if (!names.length) {
        return;
      }
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        jml.views[name].optimize();
      }
      return jml;
    };
    watchAll = jml.watchAll = function(interval, names) {
      var name, _i, _len;
      if (isArray(interval)) {
        names = interval;
        interval = false;
      }
      if (!names) {
        names = (function() {
          var _results;
          _results = [];
          for (name in jml.views) {
            _results.push(name);
          }
          return _results;
        })();
      }
      if (!names.length) {
        return;
      }
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        jml.views[name].watch(interval);
      }
      return jml;
    };
    if (isServer) {
      saveAll = jml.saveAll = function(file, names) {
        var data, fs, name, _i, _len;
        if (!names) {
          names = (function() {
            var _results;
            _results = [];
            for (name in jml.views) {
              _results.push(name);
            }
            return _results;
          })();
        }
        data = '';
        if (!names.length) {
          return;
        }
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          data += jml.views[name].serialize() + '\n';
        }
        fs = require('fs');
        fs.writeFileSync(file, data, 'utf-8');
        return jml;
      };
    }
    optimize = jml.optimize = function(view) {
      view = optimizeArray(view);
      return optimizeNormalize(view);
    };
    optimizeNormalize = optimizeNormalize = function(view, offset) {
      var elm, i, view2, _i, _j, _len, _ref;
      view2 = [];
      if (offset == null) {
        offset = 0;
      }
      for (i = _i = 0, _len = view.length; _i < _len; i = ++_i) {
        elm = view[i];
        if (isArray(elm) && elm[0] === '') {
          elm = optimizeNormalize(elm, 2);
          view2 = view2.concat(elm.slice(1));
        } else {
          view2.push(elm);
        }
      }
      for (i = _j = offset, _ref = view2.length; offset <= _ref ? _j < _ref : _j > _ref; i = offset <= _ref ? ++_j : --_j) {
        while (i && isString(view2[i]) && isString(view2[i - 1])) {
          view2.splice(i - 1, 2, view2[i - 1] + view2[i]);
        }
      }
      return view2;
    };
    optimizeArray = jml.optimizeArray = function(view) {
      var elm, i, view2, _i, _len;
      if (isString(view)) {
        return view;
      }
      view2 = [];
      for (i = _i = 0, _len = view.length; _i < _len; i = ++_i) {
        elm = view[i];
        if (elm === void 0) {
          continue;
        }
        if (isFunction(elm)) {
          view2.push(elm);
        } else if (isArray(elm)) {
          view2.push(optimizeTag(elm));
        } else {
          view2.push(elm);
        }
      }
      return view2;
    };
    optimizeTag = jml.optimizeTag = function(view) {
      var flag, offset, op, out, sec, sec2, temp, view2;
      if (isString(view)) {
        return view;
      }
      if (isFunction(view[0])) {
        if (isObject(view[1])) {
          return [view[0], view[1]].concat(optimizeArray(view.slice(2)));
        } else {
          return [view[0]].concat(optimizeArray(view.slice(1)));
        }
      }
      offset = 1;
      view2 = [];
      op = view[0];
      flag = false;
      if (jml.view[op]) {
        return view;
      }
      view2.push(op);
      sec = view[1];
      if (isObject(sec)) {
        offset = 2;
        sec2 = cloneWithState(sec);
        if (sec2 !== sec) {
          flag = true;
        }
        view2.push(sec);
      }
      if (!flag) {
        out = jml.renderTag(__slice.call(view2).concat(['""""']));
        temp = out.split('""""');
        view2 = [''].concat(temp[0], optimizeArray(view.slice(offset)) || [], temp[1] || []);
      } else {
        view2 = view2.concat(optimizeArray(view.slice(offset)));
      }
      return view2;
    };
    renderAttrs = jml.renderAttrs = function(attrs) {
      var name, out, value;
      out = '';
      for (name in attrs) {
        value = attrs[name];
        out += ' ' + name + (value ? '="' + attrs[name] + '"' : '');
      }
      return out;
    };
    renderStyles = jml.renderStyles = function(styles) {
      var list, name, out, val, _i, _len;
      out = [];
      for (name in styles) {
        list = styles[name];
        name = handleName(name);
        if (!isArray(list)) {
          list = [list];
        }
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          val = list[_i];
          out.push(name + ': ' + val + ';');
        }
      }
      return out.join(' ');
    };
    render = jml.render = function(arr, state, offset) {
      return renderArray(arr, state, offset);
    };
    renderArray = jml.renderArray = function(arr, state, offset) {
      var elm, i, out, ret, _i, _ref;
      out = '';
      if (!isArray(arr)) {
        if (!arr) {
          return '';
        } else {
          return arr;
        }
      }
      if (offset == null) {
        offset = 0;
      }
      for (i = _i = offset, _ref = arr.length; offset <= _ref ? _i < _ref : _i > _ref; i = offset <= _ref ? ++_i : --_i) {
        elm = arr[i];
        if (elm === void 0) {
          continue;
        }
        if (isFunction(elm)) {
          ret = elm.apply(state);
          out += jml.renderArray(ret, state);
        } else if (isString(elm)) {
          out += elm;
        } else {
          out += renderTag(elm, state);
        }
      }
      return out;
    };
    renderTag = jml.renderTag = function(elm, state) {
      var attrs, classes, content, f1, f2, i1, i2, id, injector, len, name, offset, op, out, sec, styles, tag, value, viewState;
      offset = 1;
      op = elm[0] || '';
      if (!op) {
        return renderArray(elm, state, 1);
      }
      if (isFunction(op)) {
        op = op.call(state);
      }
      out = '';
      if (state == null) {
        state = {};
      }
      if (jml.views[op]) {
        viewState = {};
        if (isObject(elm[1])) {
          offset = 2;
          extend(viewState, cloneWithState(elm[1], state));
        }
        content = elm.slice(offset);
        if (content.length) {
          viewState.content = renderArray(content, state);
        }
        return jml.views[op](viewState);
      }
      i1 = op.indexOf('#');
      i2 = op.indexOf('.');
      f1 = ~i1;
      f2 = ~i2;
      len = op.length;
      tag = op.slice(0, (f1 && i1) || (f2 && i2) || len);
      if (f1) {
        id = op.slice(i1 + 1, (f2 && i2) || len);
      }
      if (f2) {
        classes = op.slice(i2 + 1, len);
      }
      if (classes && isString(classes)) {
        classes = classes.split('.');
      }
      if (!classes) {
        classes = [];
      }
      attrs = {};
      if (id === '%') {
        injector = true;
        id = jml.generateId();
      }
      if (id) {
        attrs.id = id;
      }
      if (classes.length) {
        attrs["class"] = classes.join(' ');
      }
      styles = {};
      if (isObject(elm[1])) {
        offset = 2;
        sec = cloneWithState(elm[1], state);
        for (name in sec) {
          value = sec[name];
          if (name.charAt(0) === '_') {
            attrs[handleName(name.slice(1))] = value;
          } else {
            styles[name] = value;
          }
        }
      }
      if (!isEmptyObject(styles)) {
        attrs.style = renderStyles(styles);
      }
      if (!isEmptyObject(attrs)) {
        attrs = renderAttrs(attrs);
      } else {
        attrs = '';
      }
      if (~inArray(tag, jml.noClose)) {
        out += '<' + tag + attrs + ' />';
      } else {
        content = renderArray(elm, state, offset);
        out += '<' + tag + attrs + '>' + content + '</' + tag + '>';
      }
      if (injector) {
        out += jml.injector(elm, originalState, id);
      }
      return out;
    };
    jml.prop = function(name, def) {
      if (this[name] !== void 0) {
        return this[name];
      } else if (def) {
        return def;
      } else {
        return '';
      }
    };
    return jml;
  };

  if (typeof global !== 'undefined') {
    module.exports = init();
  } else if (typeof window !== 'undefined') {
    window.jml = init();
  }

}).call(this);
